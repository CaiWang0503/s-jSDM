% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sjSDM_DNN.R
\name{sjSDM_DNN}
\alias{sjSDM_DNN}
\title{sjSDM_DNN}
\usage{
sjSDM_DNN(X = NULL, Y = NULL, formula = NULL, hidden = c(10L, 10L, 10L),
  activation = "relu", df = NULL, l1_coefs = 0, l2_coefs = 0,
  l1_cov = 0, l2_cov = 0, iter = 50L, step_size = NULL,
  learning_rate = 0.01, sampling = 100L, parallel = 0L, device = "cpu",
  dtype = "float32")
}
\arguments{
\item{X}{matrix of environmental predictors}

\item{Y}{matrix of species occurences/responses}

\item{formula}{formula object for predictors}

\item{hidden}{hidden units in layers, length of hidden correspond to number of layers}

\item{activation}{activation functions for layer, must be of same length as hidden}

\item{df}{degree of freedom for covariance parametrization, if \code{NULL} df is set to \code{ncol(Y)/2}}

\item{l1_coefs}{strength of lasso regularization on weights: \code{l1_coefs * sum(abs(weights))}}

\item{l2_coefs}{strength of ridge regularization on weights: \code{l2_coefs * sum(weights^2)}`}

\item{l1_cov}{strength of lasso regulIarization on covariances in species-species association matrix}

\item{l2_cov}{strength of ridge regularization on covariances in species-species association matrix}

\item{iter}{number of fitting iterations}

\item{step_size}{batch size for stochastic gradient descent, if \code{NULL} then step_size is set to: \code{step_size = 0.1*nrow(X)}}

\item{learning_rate}{learning rate for Adamax optimizer}

\item{sampling}{number of sampling steps for Monte Carlo integreation}

\item{parallel}{number of cpu cores for the data loader, only necessary for large datasets}

\item{device}{which device to be used, "cpu" or "gpu"}

\item{dtype}{which data type, most GPUs support only 32 bit floats.}
}
\description{
fast and accurate joint species deep neural network model
}
\details{
The function fits a deep neural network. The last layer consist of multivariate probit link and the loss is calculated via Monte-Carlo integration of the joint likelihood for all species.
}
\note{
sjSDM_DNN depends on the anaconda python distribution and pytorch, which need to be installed before being able to use the sjSDM function. See \code{\link{install_sjSDM}} for details.
}
\examples{
\donttest{
com = simulate_SDM(env = 3L, species = 5L, sites = 100L)
X = com$env_weights
Y = com$response

model = sjSDM_DNN(X = com$env_weights, Y = com$response, hidden = c(5L, 5L, 5L), 
                  activation = c("relu", "tanh", "relu"), iter = 10L)

# fit with interaction
model = sjSDM_DNN(X = com$env_weights, Y = com$response, formula = ~0+X1:X2+X3 ,
                  hidden = c(5L, 5L, 5L), 
                  activation = c("relu", "tanh", "relu"), iter = 10L)


# predict on fitted data
preds = predict(model)

# predict on new data
preds = predict(model, newdata = X)

# get species associations
sp = getCov(model)

# extract weights
weights = getWeights(model)

# we can also assign weights:
setWeights(model, weights)
}
}
\seealso{
\code{\link{predict.sjSDM_DNN}},  \code{\link{summary.sjSDM_DNN}}, \code{\link{getWeights.sjSDM_DNN}}, \code{\link{setWeights.sjSDM_DNN}}, , \code{\link{plot.sjSDM_DNN}}
}
\author{
Maximilian Pichler
}
