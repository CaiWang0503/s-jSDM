% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sjSDM.R, R/sjSDM_linear.R
\docType{package}
\name{sjSDM}
\alias{sjSDM}
\title{sjSDM}
\usage{
sjSDM(Y = NULL, env = NULL, biotic = bioticStruct(), spatial = NULL,
  iter = 50L, step_size = NULL, learning_rate = 0.01, se = FALSE,
  link = c("probit", "logit", "linear"), sampling = 100L, parallel = 0L,
  device = "cpu", dtype = "float32")
}
\arguments{
\item{Y}{matrix of species occurences/responses}

\item{env}{matrix of environmental predictors, object of type \code{\link{envLinear}} or \code{\link{envDNN}}}

\item{biotic}{defines biotic (species-species associations) structure, object of type \code{\link{bioticStruct}}}

\item{spatial}{defines spatial structure, object of type \code{\link{spatialXY}}}

\item{iter}{number of fitting iterations}

\item{step_size}{batch size for stochastic gradient descent, if \code{NULL} then step_size is set to: \code{step_size = 0.1*nrow(X)}}

\item{learning_rate}{learning rate for Adamax optimizer}

\item{se}{calculate standard errors for environmental coefficients}

\item{link}{probit or logit}

\item{sampling}{number of sampling steps for Monte Carlo integreation}

\item{parallel}{number of cpu cores for the data loader, only necessary for large datasets}

\item{device}{which device to be used, "cpu" or "gpu"}

\item{dtype}{which data type, most GPUs support only 32 bit floats.}
}
\description{
A scalable method to estimates joint Species Distribution Models (jSDMs).

fast and accurate joint species model
}
\details{
A scalable method to estimates joint Species Distribution Models (jSDMs) based on the multivariate probit model through Monte-Carlo approximation of the joint likelihood. The numerical approximation is based on PyTorch and reticulate, and can be calculated on CPUs and GPUs alike.

The function fits a multivariate probit model via Monte-Carlo integration (see Chen et al., 2018) of the joint likelihood for all species. See Pichler and Hartig, 2020 for benchmark results.

sjSDM depends on the anaconda python distribution and pytorch, which need to be installed before being able to use the sjSDM function. 
See \code{\link{install_sjSDM}}, \code{vignette("Dependencies", package = "sjSDM")}, or the section below for details.
}
\section{PyTorch Installation - Before you start}{


A few notes before you start with the installation:
\itemize{
 \item existing conda installations (skip this point if you do not know conda): make sure you have the latest conda3/miniconda3 installation and remove unneccessary conda installations.
 \item existing conda/virtualenv (skip this point if you do not know conda): the R package reticulate has problems to find the right environment and it is better to remove unneccessary environments (see the troubleshooting section)
}
}

\section{Windows - automatic installation}{


Conda is the easiest way to install python and python packages on windows:
Install the latest \href{https://www.anaconda.com/distribution/}{conda version}

Afterwards run:\cr
\code{install_sjSDM(version = c("gpu")) # or "cpu" if you do not have a proper gpu device }

Reload the package and run the example , if this doesn't work:
\itemize{
\item Restart RStudio
\item Install manually pytorch, see the following section
}
}

\section{Windows - manual installation}{


Conda is the easiest way to install python and python packages on windows:
\itemize{
\item Install the latest \href{https://www.anaconda.com/distribution/}{conda version}
\item Open the command window (cmd.exe - hit windows key + r and write cmd)
}
Run in cmd.exe:\cr
\preformatted{
$ conda create --name sjSDM_env python=3.7\cr
$ conda activate sjSDM_env\cr
$ conda install pytorch torchvision cpuonly -c pytorch # cpu\cr
$ conda install pytorch torchvision cudatoolkit=10.1 -c pytorch #gpu\cr
}

Restart R try to run the example, if this doesn't work:
\itemize{
\item Restart RStudio
\item See the troubleshooting section
}
}

\section{Linux - automatic installation}{


Run in R:\cr
\code{install_sjSDM(version = c("gpu")) # or "cpu" if you do not have a proper gpu device }
Restart R try to run the example, if this doesn't work:
\itemize{
\item Restart RStudio
\item Install manually pytorch, see the following section
}
}

\section{Linux - manual installation}{


Via pip\cr
python3 is pre-installed on most linux distributions, but you have to check that the minimal requirement of python >= 3.6 is met: 
  
Run in your shell:\cr
\preformatted{
$ python3 --version\cr
$ python --version\cr
}

Check if pip is installed:
\preformatted{
$ pip3 --version\cr
$ pip --version\cr
}

If not then install pip:\cr
\preformatted{
$ sudo apt install python3-pip # for ubuntu/deb   # e.g. for ubuntu
}

It depends on your ENVIRONMENTAL variables whether pip or pip3 corresponds to python3. You can check the python version of pip via:\cr
\preformatted{
$ pip --version
}

In my case, I have to use "pip3":\cr
\preformatted{
$ pip3 install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html #cpu
$ pip3 install torch torchvision #gpu
}

Restart R try to run the example, if this doesn't work:
\itemize{
\item Restart RStudio
\item See the troubleshooting section
}

Via virtualenv\cr
Create a virtualenv and install dependencies (shell):\cr
\preformatted{
$ python3 -m pip install --user virtualenv\cr
$ python3 -m venv ~/sjSDM_env\cr
$ source ~/sjSDM_env/bin/activate\cr
$ pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html #cpu\cr
$ pip install torch torchvision #gpu\cr
}

Restart R try to run the example, if this doesn't work:
\itemize{
\item Restart RStudio
\item See the troubleshooting section
}

Via conda\cr
Install the latest \href{https://www.anaconda.com/distribution/}{conda version} and run (shell):\cr
\preformatted{
$ conda create --name sjSDM_env python=3.7\cr
$ conda activate sjSDM_env\cr
$ conda install pytorch torchvision cpuonly -c pytorch # cpu\cr
$ conda install pytorch torchvision cudatoolkit=10.1 -c pytorch #gpu\cr
}
Restart R try to run the example from, if this doesn't work:\cr
\itemize{
\item Restart RStudio
\item See the troubleshooting section
}
}

\section{MacOS}{


Via conda\cr
Install the latest \href{https://www.anaconda.com/distribution/}{conda version} and run in your OS shell:\cr
\preformatted{
$ conda create --name sjSDM_env python=3.7\cr
$ conda activate sjSDM_env\cr
$ conda install pytorch torchvision cpuonly -c pytorch # cpu\Cr
}
Restart R try to run the example from, if this doesn't work:
\itemize{
\item Restart RStudio
\item See the troubleshooting section
}
    
For GPU support on MacOS, you have to install the cuda binaries yourself, see \href{https://pytorch.org/}{PyTorch for help}
}

\section{Troubleshooting}{


After several installation attempts you might have corrupt and unneccessary conda environments which you have to remove:
Open the shell (Windows users: run cmd.exe):\cr
\preformatted{
$ conda env list\cr
}
will list the paths of all your environments, except for the "base" env, delete them via:\cr
\preformatted{
$ rm - r <path-to-env1>\cr
$ rm - r <path-to-env2>\cr
}
Then continue with the manual install instructions in above sections.
}

\section{Help and bugs}{


To report bugs or ask for help, post a \href{http://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example}{reproducible example} via the sjSDM \href{https://github.com/TheoreticalEcology/s-jSDM/issues}{issue tracker} on GitHub.
}

\examples{
\donttest{
  
# Basic workflow:
## simulate community:
com = simulate_SDM(env = 3L, species = 5L, sites = 100L)

## fit model:
model = sjSDM(Y = com$response,env = com$env_weights, iter = 10L)
coef(model)
summary(model)
getCov(model)

## calculate post-hoc p-values:
p = getSe(model)
summary(p)

## or turn on the option in the sjSDM function:
model = sjSDM(Y = com$response, env = com$env_weights, se = TRUE)
summary(model)

## fit model with interactions:
model = sjSDM(Y = com$response,
              env = envLinear(data = com$env_weights, formula = ~X1:X2 + X3), se = TRUE)
summary(model)

## without intercept:
model = sjSDM(Y = com$response,
              env = envLinear(data = com$env_weights, formula = ~0+X1:X2 + X3), se = TRUE)
summary(model)

## predict with model:
preds = predict(model, newdata = com$env_weights)



# Regularization
## lambda is the regularization strength
## alpha weights the lasso or ridge penalty:
## - alpha = 0 --> pure lasso
## - alpha = 1.0 --> pure ridge
model = sjSDM(Y = com$response, 
              # mix of lasso and ridge
              env = envLinear(com$env_weights, lambda = 0.01, alpha = 0.5), 
              # we can do the same for the species-species associations
              biotic = bioticStruct(lambda = 0.01, alpha = 0.5)
              )
summary(model)
coef(model)
getCov(model)



# Deep neural network
## we can fit also a deep neural network instead of a linear model:
model = sjSDM(Y = com$response,
              env = envDNN(com$env_weights, hidden = c(10L, 10L, 10L)))
summary(model)
getCov(model)
plot(model)
pred = predict(model, newdata = com$env_weights)

## extract weights
weights = getWeights(model)

## we can also assign weights:
setWeights(model, weights)

## with regularization:
model = sjSDM(Y = com$response, 
              # mix of lasso and ridge
              env = envDNN(com$env_weights, lambda = 0.01, alpha = 0.5), 
              # we can do the same for the species-species associations
              biotic = bioticStruct(lambda = 0.01, alpha = 0.5)
              )
getCov(model)
getWeights(model)

}
}
\references{
Chen, D., Xue, Y., & Gomes, C. P. (2018). End-to-end learning for the deep multivariate probit model. arXiv preprint arXiv:1803.08591.

Pichler, M., and Hartig, F. (2020). A new method for faster and more accurate inference of species associations from novel community data. arXiv preprint arXiv:2003.05331.
}
\seealso{
\code{\link{spatialRE}}, \code{\link{envDNN}}, \code{\link{print.sjSDM}}, \code{\link{predict.sjSDM}}, \code{\link{coef.sjSDM}}, \code{\link{summary.sjSDM}}, \code{\link{getCov}}, \code{\link{simulate.sjSDM}}, \code{\link{getSe}}
}
\author{
Maximilian Pichler
}
